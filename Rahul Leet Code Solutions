PYTHON Challenge 1 Code

class Solution(object):
    def addDigits(self, num):
        """
        :type num: int
        :rtype: int
        """
        while num >= 10:
            s = 0
            while num > 0:
                s += num % 10
                num //= 10
            num = s 
        return num

JAVASCRIPT Challenge 1 Code

var addDigits = function(num) {
    while (num >= 10){
        let s = 0;
        while (num > 0) {
            s += num % 10
            num = Math.floor(num/10);
        }
        num = s
    }
    return num;
};

PYTHON Challenge 2 Code

class Solution(object):
    def checkXMatrix(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: bool
        """
        n = len(grid)
        
        for i in range(n):
            for j in range(n): 
                if (i == j):
                    if (grid[i][j] == 0):
                        return False       
                elif (i + j == n - 1):
                    if (grid[i][j] == 0):
                        return False
                else: 
                    if grid[i][j] != 0:
                        return False
        return True

JavaScript Challenge 2 Code

/**
 * @param {number[][]} grid
 * @return {boolean}
 */
var checkXMatrix = function(grid) {
        let n = grid.length;
        for (let i = 0; i < n; i++){
            for (let j = 0; j<n; j++){
                if (i == j){
                    if (grid[i][j] == 0){
                        return false
                    }
                }
                else if (i + j == n - 1){
                    if (grid[i][j] == 0){
                        return false
                    }
                }
                else{
                    if (grid[i][j] !== 0) {
                        return false
                    }
                }
            }
        }
    return true
};

JavaScript Challenge 3 Code: 

/**
 * @param {Function[]} functions
 * @return {Function}
 */
var compose = function(functions) {
    if (functions.length === 0) {
        return function(x) { return x; }; // identity function
    }

    return function(x) {
        // Apply functions from right to left
        return functions.reduceRight((acc, fn) => fn(acc), x);
    };
};
/**
 * const fn = compose([x => x + 1, x => 2 * x])
 * fn(4) // 9
 */
