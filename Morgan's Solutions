Day 2 X Matrix solutions:
PYTHON:
class Solution(object):
    def checkXMatrix(self, grid):
        n = len(grid)
        for r in range(n):
            for c in range(n):
                if r ==c or r+c == n-1:
                    if grid[r][c] == 0:
                        return False
                else:
                    if grid[r][c] != 0:
                        return False
        return True
JAVA:
public class Solution {
    public static boolean checkXMatrix(int[][] grid) {
        int n = grid.length;
        for (int r = 0; r < n; r++) {
            for (int c = 0; c < n; c++) {
                if (r == c || r + c == n - 1) {
                    if (grid[r][c] == 0) {
                        return false;
                    }
                } else {
                    if (grid[r][c] != 0) {
                        return false;
                    }
                }
            }
        }
        return true;
    }
}
Day 3
/**
 * @param {Function[]} functions
 * @return {Function}
 */
var compose = function(functions) {
  if (functions.length === 0) {
    return function(x) { return x; }; // identity function
  }

  return function(x) {
    for (let i = functions.length - 1; i >= 0; i--) {
      x = functions[i](x);
    }
    return x;
  };
};

/**
 * const fn = compose([x => x + 1, x => 2 * x])
 * fn(4) // 9
 */
                    
        
